import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class TimerValueConverter
{
    ///  This takes an Instant variable type like the ones generated by Start and EndTime and converts
    ///  them into Milliseconds from a set time for any calculation and data storage purposes
    public long ConvertToMillis(Instant timer)
    {
        return timer.toEpochMilli();
    }

    ///  This takes an Instant variable type like the ones generated by Start and EndTime and converts
    ///  them into the formatted String that displays the date and then the time
    ///  guide for how the formatting works in DateTimeFormatter below in case changes are needed later
    public String ConvertToZoneDateTime(Instant timer)
    {
        ZonedDateTime zonedDateTime = timer.atZone(ZoneId.systemDefault());
        return DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss").format(zonedDateTime);
    }
}

///         DateTimeFormatter Guide
///    HH - 24-hour format hour
///    hh - 12-hour format hour [might need to use 'a' after this to add the am/pm marker]
///    mm - minutes
///    ss - seconds
///    dd - day of month
///    MM - month
///    yyyy - year
///    a - AM/PM marker